-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cmp_max is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y1 : IN STD_LOGIC_VECTOR (31 downto 0);
    y2 : IN STD_LOGIC_VECTOR (31 downto 0);
    max : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_ap_vld : OUT STD_LOGIC;
    en : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of cmp_max is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cmp_max,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.608500,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=139,HLS_SYN_LUT=340}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_19 : BOOLEAN;
    signal en_read_read_fu_32_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_270 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_275 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_280 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_60 : BOOLEAN;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_70 : BOOLEAN;
    signal grp_fu_63_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_63_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_69_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_75_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_63_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y0_to_int_fu_80_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y1_to_int_fu_98_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_84_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_94_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_102_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_112_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs7_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y2_to_int_fu_159_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_163_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_173_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_69_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_75_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y1_assign_fu_230_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_63_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_69_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component cmp_max_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    cmp_max_fcmp_32ns_32ns_1_1_U0 : component cmp_max_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_63_p0,
        din1 => grp_fu_63_p1,
        opcode => grp_fu_63_opcode,
        dout => grp_fu_63_p2);

    cmp_max_fcmp_32ns_32ns_1_1_U1 : component cmp_max_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_69_p0,
        din1 => y2,
        opcode => grp_fu_69_opcode,
        dout => grp_fu_69_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = or_cond_reg_270))) then
                or_cond2_reg_280 <= or_cond2_fu_224_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((en_read_read_fu_32_p2 = ap_const_lv1_0)))) then
                or_cond_reg_270 <= or_cond_fu_207_p2;
                tmp_16_reg_275 <= tmp_16_fu_213_p2;
                tmp_6_reg_265 <= tmp_6_fu_152_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, en_read_read_fu_32_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and (en_read_read_fu_32_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif ((not((ap_start = ap_const_logic_0)) and not((en_read_read_fu_32_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_19 assign process. --
    ap_sig_bdd_19_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_19 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_60 assign process. --
    ap_sig_bdd_60_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_60 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_70 assign process. --
    ap_sig_bdd_70_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_70 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_19)
    begin
        if (ap_sig_bdd_19) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_60)
    begin
        if (ap_sig_bdd_60) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_70)
    begin
        if (ap_sig_bdd_70) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    en_read_read_fu_32_p2 <= en;
    grp_fu_63_opcode <= ap_const_lv5_2;

    -- grp_fu_63_p0 assign process. --
    grp_fu_63_p0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, y0, y1, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_63_p0 <= y1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_63_p0 <= y0;
        else 
            grp_fu_63_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_63_p1 assign process. --
    grp_fu_63_p1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, y0, y1, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_63_p1 <= y0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_63_p1 <= y1;
        else 
            grp_fu_63_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_69_opcode <= ap_const_lv5_2;

    -- grp_fu_69_p0 assign process. --
    grp_fu_69_p0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, y0, y1, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_69_p0 <= y1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_69_p0 <= y0;
        else 
            grp_fu_69_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_75_p0 assign process. --
    grp_fu_75_p0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, tmp_6_fu_152_p2, tmp_6_reg_265, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_75_p0 <= tmp_6_reg_265;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_75_p0 <= tmp_6_fu_152_p2;
        else 
            grp_fu_75_p0 <= "X";
        end if; 
    end process;

    grp_fu_75_p2 <= (grp_fu_75_p0 and grp_fu_63_p2);
    max <= 
        y0 when (or_cond_reg_270(0) = '1') else 
        y1_assign_fu_230_p3;

    -- max_ap_vld assign process. --
    max_ap_vld_assign_proc : process(en_read_read_fu_32_p2, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((not((en_read_read_fu_32_p2 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            max_ap_vld <= ap_const_logic_1;
        else 
            max_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    notlhs1_fu_177_p2 <= "0" when (tmp_s_fu_163_p4 = ap_const_lv8_FF) else "1";
    notlhs6_fu_134_p2 <= "0" when (tmp_2_fu_102_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_116_p2 <= "0" when (tmp_fu_84_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_183_p2 <= "1" when (tmp_9_fu_173_p1 = ap_const_lv23_0) else "0";
    notrhs7_fu_140_p2 <= "1" when (tmp_3_fu_112_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_122_p2 <= "1" when (tmp_1_fu_94_p1 = ap_const_lv23_0) else "0";
    or_cond2_fu_224_p2 <= (grp_fu_75_p2 and tmp_18_fu_219_p2);
    or_cond_fu_207_p2 <= (grp_fu_75_p2 and tmp_13_fu_201_p2);
    tmp_10_fu_189_p2 <= (notrhs1_fu_183_p2 or notlhs1_fu_177_p2);
    tmp_11_fu_195_p2 <= (tmp_4_fu_128_p2 and tmp_10_fu_189_p2);
    tmp_13_fu_201_p2 <= (tmp_11_fu_195_p2 and grp_fu_69_p2);
    tmp_16_fu_213_p2 <= (tmp_5_fu_146_p2 and tmp_10_fu_189_p2);
    tmp_18_fu_219_p2 <= (tmp_16_reg_275 and grp_fu_69_p2);
    tmp_1_fu_94_p1 <= y0_to_int_fu_80_p1(23 - 1 downto 0);
    tmp_2_fu_102_p4 <= y1_to_int_fu_98_p1(30 downto 23);
    tmp_3_fu_112_p1 <= y1_to_int_fu_98_p1(23 - 1 downto 0);
    tmp_4_fu_128_p2 <= (notrhs_fu_122_p2 or notlhs_fu_116_p2);
    tmp_5_fu_146_p2 <= (notrhs7_fu_140_p2 or notlhs6_fu_134_p2);
    tmp_6_fu_152_p2 <= (tmp_4_fu_128_p2 and tmp_5_fu_146_p2);
    tmp_9_fu_173_p1 <= y2_to_int_fu_159_p1(23 - 1 downto 0);
    tmp_fu_84_p4 <= y0_to_int_fu_80_p1(30 downto 23);
    tmp_s_fu_163_p4 <= y2_to_int_fu_159_p1(30 downto 23);
    y0_to_int_fu_80_p1 <= y0;
    y1_assign_fu_230_p3 <= 
        y1 when (or_cond2_reg_280(0) = '1') else 
        y2;
    y1_to_int_fu_98_p1 <= y1;
    y2_to_int_fu_159_p1 <= y2;
end behav;
